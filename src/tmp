
#include <malloc.h>

typedef char byte;

typedef struct _node {
	struct _node* left;
	struct _node* right;
	char* key;
	void* data;
	byte (*compare)(void*,void*);
} node_t;

node_t* node_create(void* _data, byte (*compare_ptr)(void*,void*)) {
	node_t* tmp = (node_t*)malloc(sizeof(node_t));
	tmp->data = _data;
	tmp->left = NULL;
	tmp->right = NULL;
	tmp->compare = compare_ptr;
	return tmp;
}

void node_free(node_t* _node) {
	if (!_node) return;
	if (_node->left) node_free(_node->left);
	if (_node->right) node_free(_node->right);
	free(_node);
}

byte node_insert(node_t* _node, void* _new_data) {
	if (!_node || !_new_data) return -1;
	
	// same data
	byte res = _node->compare(_node->data, _new_data);
	if (res == 0) return -1;
	else if (res == 1) {

	}

}


// _side = 0 - right side
//         1 - left side
void node_print_side(node_t* _node, byte _side) {
	if (!_node) return;
	puts(_node->data);
	node_print_side((_side) ? _node->left : _node->right, _side);
}

// returns
// 	   -1 - error (passed null pointers)
//		0 - equal
//		1 - first is larger
//		2 - second is larger
byte str_compare(void* _s1, void* _s2) {
	if (!_s1 || !_s2) return -1;

	char* s1 = (char*)_s1;
	char* s2 = (char*)_s2;
	
	while (*s1 != '\0' || *s2 != '\0') {
		if (*s1 > *s2)
			return 1;
		else if (*s1 < *s2)
			return 2;
		s1++;
		s2++;
	}

	if (*s1 == *s2) return 0;
	else if (*s1 == '\0') return 1;
	else return 2;
}

// int main(void) {
// 	node_t* root = node_create("/", str_compare);
// 	root->left = node_create("usr", str_compare);
// 	root->right = node_create("bin", str_compare);
// 	root->left->left = node_create("foo", str_compare);
// 	root->left->right = node_create("bar", str_compare);

// 	node_free(root);

// 	return 0;
// }